// <auto-generated />
using System;
using HandMadeEcommece.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HandMadeEcommece.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250222061605_UpdateOndatebase")]
    partial class UpdateOndatebase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HandMadeEcommece.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Logo")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminAddresses");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminBrand", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("AdminBrands");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminCategory", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AdminCategories");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminOrder", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("AdminOrders");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminProduct", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("AdminProducts");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminTransaction", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionMoneyId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "TransactionMoneyId");

                    b.HasIndex("TransactionMoneyId");

                    b.ToTable("AdminTransactions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminVendor", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("AdminVendors");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminVendorConditions", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("VendorConditionsId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "VendorConditionsId");

                    b.HasIndex("VendorConditionsId");

                    b.ToTable("AdminVendorConditions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IsActived")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Icon")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Seen")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.CheckUserNameAndEmail", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("UserName", "Email");

                    b.ToTable("checkUserNameAndEmails");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("ClaimAdmins");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ClaimRoles");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClaimUsers");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("ClaimVendors");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<double>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MaxUse")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.DeliveryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Delivery_Zones")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("IdTax")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Pricing")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryCompanies");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyDeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OrderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("ProductQty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("CompanyDeliveryId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.OrderVendor", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("OrderVendorOrders");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.PaypalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyDeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<double>("CurrencyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDeliveryId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("PaypalSettings");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IsApproved")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("OfferEndDate")
                        .HasColumnType("DATETIME");

                    b.Property<double?>("OfferPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<DateTime?>("OfferStartDate")
                        .HasColumnType("DATETIME");

                    b.Property<double>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<string>("ProductType")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("SeoTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Sku")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ThumbImage")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CouponId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductImageGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImageGalleries");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductReviewGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ProductReviewId");

                    b.ToTable("ProductReviewGalleries");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.PusherSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("PusherAppId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PusherCluster")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PusherKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PusherSecret")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("PusherSettings");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.TransactionMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<double>("AmountRealCurrency")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<string>("AmountRealCurrencyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("CompanyDeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDeliveryId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.UserCoupons", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CouponId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoupons");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Banner")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbLink")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Image")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("InstaLink")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ShopName")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TwLink")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAddresses");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("VendorConditions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProducts");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorTransaction", b =>
                {
                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("transactionMoneyId")
                        .HasColumnType("int");

                    b.Property<int>("TranscationId")
                        .HasColumnType("int");

                    b.HasKey("VendorId", "transactionMoneyId");

                    b.HasIndex("transactionMoneyId");

                    b.ToTable("VendorTransactions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.WishList", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Admin", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminAddress", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminBrand", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminBrands")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Brand", null)
                        .WithMany("adminBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminCategory", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminCategories")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Category", null)
                        .WithMany("categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminOrder", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminsOrders")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Order", null)
                        .WithMany("adminOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminProduct", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminProducts")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Product", null)
                        .WithMany("AdminProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminTransaction", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminTransactions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.TransactionMoney", null)
                        .WithMany("adminTransactions")
                        .HasForeignKey("TransactionMoneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminVendor", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminVendors")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", null)
                        .WithMany("adminsVendor")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.AdminVendorConditions", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("adminVendorConditions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.VendorCondition", null)
                        .WithMany("AdminVendorConditions")
                        .HasForeignKey("VendorConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Cart", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.CartItem", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Cart", "cart")
                        .WithMany("items")
                        .HasForeignKey("CartId");

                    b.HasOne("HandMadeEcommece.Models.Data.Product", "product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("cart");

                    b.Navigation("product");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Chat", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId");

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", "Vendor")
                        .WithMany("Chats")
                        .HasForeignKey("VendorId");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimAdmin", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", "admin")
                        .WithMany("claims")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimRole", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Role", "Role")
                        .WithMany("ClaimRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimUser", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.User", "user")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ClaimVendor", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", "vendor")
                        .WithMany("claims")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Order", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("HandMadeEcommece.Models.Data.Order", "CartId");

                    b.HasOne("HandMadeEcommece.Models.Data.DeliveryCompany", "DeliveryCompany")
                        .WithMany("orders")
                        .HasForeignKey("CompanyDeliveryId");

                    b.HasOne("HandMadeEcommece.Models.Data.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Cart");

                    b.Navigation("DeliveryCompany");

                    b.Navigation("user");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.OrderProduct", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Order", null)
                        .WithMany("orderProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Product", null)
                        .WithMany("ordersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.OrderVendor", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Order", null)
                        .WithMany("orderVendor")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", null)
                        .WithMany("orderVendor")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.PaypalSetting", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.DeliveryCompany", "DeliveryCompany")
                        .WithMany("paypalSetting")
                        .HasForeignKey("CompanyDeliveryId");

                    b.HasOne("HandMadeEcommece.Models.Data.User", "User")
                        .WithMany("PaypalSettings")
                        .HasForeignKey("UserId");

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", "Vendor")
                        .WithMany("paypalSettings")
                        .HasForeignKey("VendorId");

                    b.Navigation("DeliveryCompany");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Product", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Brand", "Brand")
                        .WithMany("products")
                        .HasForeignKey("BrandId");

                    b.HasOne("HandMadeEcommece.Models.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("HandMadeEcommece.Models.Data.Coupon", "Coupon")
                        .WithMany("products")
                        .HasForeignKey("CouponId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductImageGallery", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Product", "Product")
                        .WithMany("ProductImagesGallery")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductReview", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.HasOne("HandMadeEcommece.Models.Data.User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductReviewGallery", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.ProductReview", "ProductReview")
                        .WithMany("ImageGallery")
                        .HasForeignKey("ProductReviewId");

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.TransactionMoney", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.DeliveryCompany", "DeliveryCompany")
                        .WithMany("transactionMoneys")
                        .HasForeignKey("CompanyDeliveryId");

                    b.HasOne("HandMadeEcommece.Models.Data.Order", "order")
                        .WithOne("transactionMoney")
                        .HasForeignKey("HandMadeEcommece.Models.Data.TransactionMoney", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.User", "user")
                        .WithMany("TransactionMoneys")
                        .HasForeignKey("UserId");

                    b.Navigation("DeliveryCompany");

                    b.Navigation("order");

                    b.Navigation("user");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.User", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.UserAddress", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Admin", null)
                        .WithMany("addresses")
                        .HasForeignKey("AdminId");

                    b.HasOne("HandMadeEcommece.Models.Data.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId");

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", null)
                        .WithMany("UserAddresses")
                        .HasForeignKey("VendorId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.UserCoupons", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Coupon", null)
                        .WithMany("userCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.User", null)
                        .WithMany("UserCoupons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Vendor", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Role", "Role")
                        .WithMany("Vendors")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorAddress", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorProduct", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Product", null)
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", null)
                        .WithMany("vendorProducts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorTransaction", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Vendor", null)
                        .WithMany("vendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.TransactionMoney", null)
                        .WithMany("vendorTransactions")
                        .HasForeignKey("transactionMoneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.WishList", b =>
                {
                    b.HasOne("HandMadeEcommece.Models.Data.Product", null)
                        .WithMany("WishList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandMadeEcommece.Models.Data.User", null)
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Brand", b =>
                {
                    b.Navigation("adminBrands");

                    b.Navigation("products");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Admin", b =>
                {
                    b.Navigation("addresses");

                    b.Navigation("adminBrands");

                    b.Navigation("adminCategories");

                    b.Navigation("adminProducts");

                    b.Navigation("adminTransactions");

                    b.Navigation("adminVendorConditions");

                    b.Navigation("adminVendors");

                    b.Navigation("adminsOrders");

                    b.Navigation("claims");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Cart", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("items");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("categories");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Coupon", b =>
                {
                    b.Navigation("products");

                    b.Navigation("userCoupons");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.DeliveryCompany", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("paypalSetting");

                    b.Navigation("transactionMoneys");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Order", b =>
                {
                    b.Navigation("adminOrders");

                    b.Navigation("orderProduct");

                    b.Navigation("orderVendor");

                    b.Navigation("transactionMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Product", b =>
                {
                    b.Navigation("AdminProducts");

                    b.Navigation("CartItems");

                    b.Navigation("ProductImagesGallery");

                    b.Navigation("ProductReviews");

                    b.Navigation("VendorProducts");

                    b.Navigation("WishList");

                    b.Navigation("ordersProducts");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.ProductReview", b =>
                {
                    b.Navigation("ImageGallery");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ClaimRoles");

                    b.Navigation("Users");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.TransactionMoney", b =>
                {
                    b.Navigation("adminTransactions");

                    b.Navigation("vendorTransactions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Chats");

                    b.Navigation("Claims");

                    b.Navigation("Orders");

                    b.Navigation("PaypalSettings");

                    b.Navigation("ProductReviews");

                    b.Navigation("TransactionMoneys");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserCoupons");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.Vendor", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("UserAddresses");

                    b.Navigation("adminsVendor");

                    b.Navigation("claims");

                    b.Navigation("orderVendor");

                    b.Navigation("paypalSettings");

                    b.Navigation("vendorProducts");

                    b.Navigation("vendorTransactions");
                });

            modelBuilder.Entity("HandMadeEcommece.Models.Data.VendorCondition", b =>
                {
                    b.Navigation("AdminVendorConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
